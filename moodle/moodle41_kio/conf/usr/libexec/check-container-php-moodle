#!/bin/bash -u
# description: check moodle php-fpm container

usage() {
    cat 1>&2 <<EOF
Script to check moodle php container.

ENVIRONMENT VARS:
PHP_FPM_CHECK_SOCKET    socket php-fpm listen to
MOODLE_APP              path to moodle code
MOODLE_DATA             moodledata path

USAGE:
    check-container [OPTIONS]

OPTIONS (check moodle php container):
  -c            check if config.php exists
  -d            check socket database listen to
  -i            check if database is installed
  -l            check liveness (-s -d -c -m) (Default)
  -m            check if moodledata is writable
  -r            check readiness (-s -d -c -m -i)
  -s            check socket php-fpm listen to
  -u            check if upgrade not needed

EXAMPLES:
    /usr/libexec/check-container-php-moodle -i
    /usr/libexec/check-container-php-moodle -u
    /usr/libexec/check-container-php-moodle -r
EOF
}


check_socket() {
    # check tcp socket
    CHECK_SOCKET=${1}
    CHECK_SOCKET_NAME=${2}
    CHECK_SOCKET_TIMEOUT=${3:-2.8}
    # if not using unix socket
    if [[ ${CHECK_SOCKET} != /* ]]; then
        # extra host and port from var
        # default host to 127.0.0.1 if no ":"
        socket_host="127.0.0.1"
        [[ $CHECK_SOCKET == *":"* ]] && socket_host="${CHECK_SOCKET%%:*}"
        socket_port="${CHECK_SOCKET#*:}"
        timeout ${CHECK_SOCKET_TIMEOUT} bash -c "cat < /dev/null > /dev/tcp/${socket_host}/${socket_port}"
        if [ $? -ne 0 ]; then
            echo "$0: CHECK: timeout checking ${CHECK_SOCKET_NAME} tcp socket '${socket_host}:${socket_port}'"
            exit 1
        fi
    else
        echo "$0: CHECK: ${CHECK_SOCKET_NAME} is using unix socket"
    fi
}

check_php_fpm_socket() {
    # check php-fpm tcp socket
    PHP_FPM_CHECK_SOCKET=${PHP_FPM_CHECK_SOCKET:-$PHP_FPM_STATUS_LISTEN}
    check_socket "${PHP_FPM_CHECK_SOCKET}" "php-fpm"
}

check_database_socket() {
    # check database tcp socket
    check_socket "$DATABASE_CHECK_SOCKET" "database"
}

check_config_file() {
    # check config.php exists and its sintax
    test -f ${MOODLE_APP}/config.php
    if [ $? -ne 0 ]; then
        echo "$0: CHECK: config.php does not exist"
        exit 1
    fi
    php -l ${MOODLE_APP}/config.php > /dev/null
    if [ $? -ne 0 ]; then
        echo "$0: CHECK: config.php sintax error"
        exit 1
    fi
}

check_database_installed() {
    # check database is installed
    # code exit 2 means database scheme not installed
    set -e
    php <<'CODE'
<?php
define('CLI_SCRIPT', true);
define('NO_UPGRADE_CHECK', true);
$MOODLE_APP = getenv('MOODLE_APP') ?: '/var/www/html';
require($MOODLE_APP . '/config.php');
if (!empty($CFG->upgraderunning)) {
    echo "CHECK: Upgrade is running\n";
    exit(0);
}
if (empty($CFG->version)) {
    echo "CHECK: Database is not yet installed\n";
    exit(2);
}
?>
CODE
}

check_upgrade_not_pending() {
    # it clears cache
    # not intended to run too frequently
    # code exit 2 means upgrade pending
    set -e
    php <<'CODE'
<?php
if (function_exists('opcache_reset') and !isset($_SERVER['REMOTE_ADDR'])) {
    opcache_reset();
}

define('CLI_SCRIPT', true);
define('CACHE_DISABLE_ALL', true);

$MOODLE_APP = getenv('MOODLE_APP') ?: '/var/www/html';
require($MOODLE_APP . '/config.php');
if (moodle_needs_upgrading()) {
    echo "CHECK: Moodle upgrade needed\n";
    exit(2);
}
?>
CODE
}

check_moodledata() {
    # check moodledata is writable
    TMPFILE=`mktemp -q -p ${MOODLE_DATA}/`
    if [ $? -ne 0 ]; then
        echo "$0: CHECK: Can't create file in '${MOODLE_DATA}'"
        exit 1
    fi
    rm $TMPFILE
}

while getopts ":cdlimrsu" opt; do
  case ${opt} in
    c )
        check_config_file
        ;;
    d )
        check_database_socket
        ;;
    l )
        check_php_fpm_socket
        check_database_socket
        check_config_file
        check_moodledata
        ;;
    i )
        check_database_installed
        ;;
    m )
        check_moodledata
        ;;
    r )
        check_php_fpm_socket
        check_database_socket
        check_config_file
        check_moodledata
        check_database_installed
        ;;
    s )
        check_php_fpm_socket
        ;;
    u )
        check_upgrade_not_pending
        ;;
    \? )
        usage
        exit
        ;;
  esac
done
shift $((OPTIND -1))

if (( $OPTIND == 1 )); then
    echo -e "No check. Use an option:\n"
    usage
    exit
fi

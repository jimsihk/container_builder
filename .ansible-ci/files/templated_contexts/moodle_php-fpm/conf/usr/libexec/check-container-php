#! /bin/bash -u
# description: check moodle php-fpm container

usage() {
    cat 1>&2 <<EOF
Script to check moodle php container.

ENVIRONMENT VARS:
PHP_FPM_PORT            tcp port php-fpm listen to
MOODLE_APP              path to moodle code
MOODLE_DATA             moodledata path

USAGE:
    check-container [OPTIONS]

OPTIONS (check moodle php container):
  -c            check if config.php exists
  -d            check if database is installed
  -l            check liveness (-d -m) (Default)
  -m            check if moodledata is writable
  -r            check readiness (-c -d -m)
  -s <status>   get a json output of moodle checks and get status: all|critical|error|warning|unknown|info|ok|na
  -t            check php-fpm tcp port (if not using unix socket)
  -u            check if upgrade not needed

EXAMPLES:
    check-container -i
    check-container -u
    check-container -r
EOF
}

check_tcp_port() {
    # check php-fpm tcp port

    # Check php-fpm is not using unix socket
    if [[ ${PHP_FPM_LISTEN+x} != /* ]]; then
        cat < /dev/null > /dev/tcp/127.0.0.1/${PHP_FPM_PORT}
    else
        echo "$0: CHECK: php-fpm is using unix socket"
    fi
}

check_config_file() {
    # check config.php exists and its sintax
    test -f ${MOODLE_APP}/config.php
    if [ $? -ne 0 ]; then
        echo "$0: CHECK: config.php does not exist"
        exit 1
    fi
    php -l ${MOODLE_APP}/config.php
    if [ $? -ne 0 ]; then
        echo "$0: CHECK: config.php sintax error"
        exit 1
    fi
}

check_database_installed() {
    # check database is installed
    # code exit 2 means database scheme not installed
    set -e
    php <<'CODE'
<?php
define('CLI_SCRIPT', true);
require(getenv('MOODLE_APP') . '/config.php');
if (empty($CFG->version)) {
    echo "CHECK: Database is not yet installed\n";
    exit(2);
}
?>
CODE
}

check_upgrade_not_pending() {
    # it clears cache
    # not intended to run too frequently
    # code exit 2 means upgrade pending
    set -e
    php <<'CODE'
<?php
if (function_exists('opcache_reset') and !isset($_SERVER['REMOTE_ADDR'])) {
    opcache_reset();
}

define('CLI_SCRIPT', true);
define('CACHE_DISABLE_ALL', true);

require(getenv('MOODLE_APP') . '/config.php');
if (moodle_needs_upgrading()) {
    echo "CHECK: Moodle upgrade needed\n";
    exit(2);
}
?>
CODE
}

check_moodledata() {
    # check moodledata is writable
    TMPFILE=`mktemp -q -p ${MOODLE_DATA}/`
    if [ $? -ne 0 ]; then
        echo "$0: CHECK: Can't create file in '${MOODLE_DATA}'"
        exit 1
    fi
    rm $TMPFILE
}

get_json_moodle_checks() {
    # check moodle checks
    set -e
    php <<'CODE'
<?php

define('CLI_SCRIPT', true);
require(getenv('MOODLE_APP') . '/config.php');

use core\check\result;

$filter_status='all';
if(getenv('CHECK_INCLUDE_STATUS')){
    $filter_status=explode( ',', strtolower(getenv('CHECK_INCLUDE_STATUS')));
}

$types = array('status', 'security', 'performance');
$all_checks = array();

foreach ($types as $type){
    $method = 'get_' . $type . '_checks';
    $checks = \core\check\manager::$method();
    foreach ($checks as $check){
        $result = $check->get_result();
        $status = $result->get_status();
        if (empty($filter_status) || in_array("all", $filter_status) || in_array(strtolower($status), $filter_status)) {
            $type_check = array();
            $action_link = $check->get_action_link();
            $type_check['name'] = $check->get_name();
            $type_check['ref'] = $check->get_ref();
            $type_check['status'] = $status;
            $type_check['summary'] = $result->get_summary();
            $type_check['details'] = $result->get_details();
            if ($actionlink){
                $type_check['action_link']['name'] = $actionlink->name;
                $type_check['action_link']['url'] = $actionlink->url;
            }
            $all_checks[$type][] = $type_check;
        }
    }
}
if($all_checks){
    echo json_encode($all_checks);
}
?>
CODE
}

while getopts ":cdlmrs:tu" opt; do
  case ${opt} in
    c )
        check_config_file
        ;;
    d )
        check_database_installed
        ;;
    l )
        check_database_installed
        check_moodledata
        ;;
    m )
        check_moodledata
        ;;
    r )
        check_config_file
        check_database_installed
        check_moodledata
        ;;
    s )
        export CHECK_INCLUDE_STATUS=${OPTARG:-all}
        get_json_moodle_checks
        ;;
    t )
        check_tcp_port
        ;;
    u )
        check_upgrade_not_pending
        ;;
    \? )
        usage
        exit
        ;;
  esac
done
shift $((OPTIND -1))

if (( $OPTIND == 1 )); then
    echo -e "No check. Use an option:\n"
    usage
    exit
fi

#!/bin/bash -u
# description: check moodle php-fpm container

usage() {
    cat 1>&2 <<EOF
Script to check moodle php container.

ENVIRONMENT VARS:
PHP_FPM_CHECK_SOCKET    socket php-fpm listen to
MOODLE_APP              path to moodle code
MOODLE_DATA             moodledata path

USAGE:
    check-container [OPTIONS]

OPTIONS (check moodle php container):
  -c            check if config.php exists
  -d            check if database is installed
  -l            check liveness (-d -m) (Default)
  -m            check if moodledata is writable
  -r            check readiness (-c -d -m)
  -s            check socket php-fpm listen to
  -u            check if upgrade not needed

EXAMPLES:
    check-container -i
    check-container -u
    check-container -r
EOF
}

check_php_fpm_socket() {
    # check php-fpm tcp port
    PHP_FPM_CHECK_SOCKET=${PHP_FPM_CHECK_SOCKET:-$PHP_FPM_STATUS_LISTEN}
    # if not using unix socket
    if [[ ${PHP_FPM_CHECK_SOCKET} != /* ]]; then
        # extra host and port from var
        # default host to 127.0.0.1 if no ":"
        php_fpm_host="127.0.0.1"
        [[ $PHP_FPM_CHECK_SOCKET == *":"* ]] && php_fpm_host="${PHP_FPM_CHECK_SOCKET%%:*}"
        php_fpm_port="${PHP_FPM_CHECK_SOCKET#*:}"
        timeout ${PHP_FPM_CHECK_SOCKET_TIMEOUT:-2.8} bash -c "cat < /dev/null > /dev/tcp/${php_fpm_host}/${php_fpm_port}"
        if [ $? -ne 0 ]; then
            echo "$0: CHECK: timeout checking tcp socket '${php_fpm_host}:${php_fpm_port}'"
            exit 1
        fi
    else
        echo "$0: CHECK: php-fpm is using unix socket"
    fi
}

check_config_file() {
    # check config.php exists and its sintax
    test -f ${MOODLE_APP}/config.php
    if [ $? -ne 0 ]; then
        echo "$0: CHECK: config.php does not exist"
        exit 1
    fi
    php -l ${MOODLE_APP}/config.php
    if [ $? -ne 0 ]; then
        echo "$0: CHECK: config.php sintax error"
        exit 1
    fi
}

check_database_installed() {
    # check database is installed
    # code exit 2 means database scheme not installed
    set -e
    php <<'CODE'
<?php
define('CLI_SCRIPT', true);
define('NO_UPGRADE_CHECK', true);
$MOODLE_APP = getenv('MOODLE_APP') ?: '/var/www/html';
require($MOODLE_APP . '/config.php');
if (!empty($CFG->upgraderunning)) {
    echo "CHECK: Upgrade is running\n";
    exit(0);
}
if (empty($CFG->version)) {
    echo "CHECK: Database is not yet installed\n";
    exit(2);
}
?>
CODE
}

check_upgrade_not_pending() {
    # it clears cache
    # not intended to run too frequently
    # code exit 2 means upgrade pending
    set -e
    php <<'CODE'
<?php
if (function_exists('opcache_reset') and !isset($_SERVER['REMOTE_ADDR'])) {
    opcache_reset();
}

define('CLI_SCRIPT', true);
define('CACHE_DISABLE_ALL', true);

$MOODLE_APP = getenv('MOODLE_APP') ?: '/var/www/html';
require($MOODLE_APP . '/config.php');
if (moodle_needs_upgrading()) {
    echo "CHECK: Moodle upgrade needed\n";
    exit(2);
}
?>
CODE
}

check_moodledata() {
    # check moodledata is writable
    TMPFILE=`mktemp -q -p ${MOODLE_DATA}/`
    if [ $? -ne 0 ]; then
        echo "$0: CHECK: Can't create file in '${MOODLE_DATA}'"
        exit 1
    fi
    rm $TMPFILE
}

while getopts ":cdlmrsu" opt; do
  case ${opt} in
    c )
        check_config_file
        ;;
    d )
        check_database_installed
        ;;
    l )
        check_database_installed
        check_moodledata
        ;;
    m )
        check_moodledata
        ;;
    r )
        check_config_file
        check_database_installed
        check_moodledata
        ;;
    s )
        check_php_fpm_socket
        ;;
    u )
        check_upgrade_not_pending
        ;;
    \? )
        usage
        exit
        ;;
  esac
done
shift $((OPTIND -1))

if (( $OPTIND == 1 )); then
    echo -e "No check. Use an option:\n"
    usage
    exit
fi
